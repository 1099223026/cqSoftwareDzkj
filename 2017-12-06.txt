1、配置PHP7、mysql、apache的环境变量
2、测试昨天的接口，并查看业务逻辑
3、交易请求撤销的业务逻辑修改
	判断当前订单的状态是否可以撤销
	将订单状态改为撤销中，修改撤销申请时间、更新时间
4、开小会
	1>.php + node.js 做两个服务器，node写接口，php 处理复杂的业务逻辑
	2>.php_doc 自动生成 api 文档（自动化）
	3>.博客-风雪之隅
	4>.基于 token 的身份验证
	5>.node.js 不适合大的业务逻辑
	6>.如何检测程序是否死掉
5、const常量需要刷新页面才可以改变值，普通变量不需要刷新就可以，可以将用户登录的信息保存在const常量里，再js来对比是否登录
6、自理解撮合系统涉及到的东西
	撮合系统是将订单变为交易（全部交易成功、部分交易成功、未交易）的一个平台
	1、建立后台系统与撮合系统的tcp连接（socket_conn）
	2、后台接受前台消息
	3、后台根据消息生成订单并入库（order）订单表
	4、将订单信息打包给撮合系统（int 64bit php）
	5、撮合系统判断订单是否可以用来交易（卖家、买家）
		-- 倘若订单数据是错误的，那么就存在撮合系统崩盘
		，处理如下：
			1>.还原所有事故（订单）现场
				--- 读取数据库中 order 表中还未交易的订单，可通过order_status来判断是否已经交易
			2>.实时监控程序调用并继续运行撮合系统
	6、是否有合适的买/卖家，
	7、根据买/卖家各自的委托数量来执行是“全部交易”，还是“部分交易”
	8、交易成功后入库（detail）明细表
	9、返回信息给后台系统
7、用户支入/付订单业务逻辑构思
8、了解公司的框架
	如何实现
	如何架构
9、PSR-2代码风格规范
10、脚手架